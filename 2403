전체 프로젝트 공유 : https://bit.ly/2ZaI9sJ

0. 학번 : 2403

[프로젝트 1 : 등가속도 운동 방정식]
1)연구소 이름 : 권순의 연구소
2)연구소가 해결하려는 문제 : 초기속력, 가속도(최종속력), 진행시간 입력하면 공식에 대입해서 평균속력, 이동거리, 최종속력(가속도) 구하고 그래프도 출력
3)연구소의 깃헙 링크 : https://github.com/yttts4354/-/blob/master/%EC%A0%95%EB%B3%B4%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8
4-1)수정하거나 추가하고 싶은 내용
등가속도 운동 방정식을 이용해 다양한 물리 문제를 풀 수 있다. 
s = vi*t + 1/2*a*t^2
4-2)내가 기여한 내용
if vf == ? :
  vi = int(input("초기속력을 입력하세요:"))
  a = int(input("가속도을 입력하세요:"))
  t = int(input("걸린 시간을 입력하세요:"))
  s = vi*t + 1/2*a*t^2
  print("이동거리는", s, "m 입니다.") 
5)내가 기여한 내용에 대한 설명
  나중속력을 모를 때
  초기속력, 걸린시간, 가속도를 알고 있는 경우 이동거리를 구할 수 있다.
6)내가 기여한 내용의 반영 여부 : X

[프로젝트 2 : 원자번호에 따른 전자배치 구하기]
1)연구소 이름 : 쌈박한 연구소
2)연구소가 해결하려는 문제 : 원자번호에 따른 전자배치 구하기
3)연구소의 깃헙 링크 : https://github.com/parkhamint/-project-2019/blob/master/%EC%A0%95%EB%B3%B4%20pro%20%EC%B5%9C%EC%A2%85.ipynb
4-1)수정하거나 추가하고 싶은 내용
원자번호를 입력하면 원소의 이름도 같이 출력된다.
4-2)내가 기여한 내용
num = {'1':'H', '2':'He', '3': 'Li', '4' : 'Be', '5' : 'B', '6' : 'C', '7' : 'N', '8' : 'O', '9' : 'F', '10' : 'Ne',
'11' : 'Na' , '12' : 'Mg', '13' : 'Al', '14' : 'Si', '15' : 'P', '16' : 'S', '17' : 'Cl', '18' : 'Ar', '19' : 'K', '20' : 'Ca', 
'21' : 'Sc', '22' : 'Ti', '23' : 'V', '24' : 'Cr', '25' : 'Mn', '26' : 'Fe', '27' : 'Co', '28' : 'Ni', '29' : 'Cu', '30' : 'Zn',
'31' : 'Ga', '32' : 'Ge', '33' : 'As', '34' : 'Se', '35' : 'Br', '36' : 'Kr', '37' : 'Rb', '38' : 'Sr', '39' : 'Y', '40' : 'Zr',
'41' : 'Nb', '42' : 'Mo', '43' : 'Te', '44' : 'Ru', '45' : 'Rh', '46' : 'Pd', '47' : 'Ag', '48' : 'Cd', '49' : 'In', '50' : 'Sn',
'51' : 'Sb', '52' : 'Te', '53' : 'I', '54' : 'Xe', '55' : 'Cs', '56' : 'Ba', '57' : 'La', '58' : 'Ce', '59' : 'Pr', '60' : 'Nd',
'61' : 'Pm', '62' : 'Sm', '63' : 'Eu', '64' : 'Gd', '65' : 'Tb', '66' : 'Dy', '67' : 'Ho', '68' : 'Er', '69' : 'Tm', '70' : 'Yb',
'71' : 'Lu', '72' : 'Hf', '73' : 'Ta', '74' : 'W', '75' : 'Re', '76' : 'Os', '77' : 'Ir', '78' : 'Pt', '79' : 'Au', '80' : 'Hg',
'81' : 'Tl', '82' : 'Pb', '83' : 'Bi', '84' : 'Po', '85' : 'At', '86' : 'Rn', '87' : 'Fr', '88' : 'Ra', '89' : 'Ac', '90' : 'Th',
'91' : 'Pa', '92' : 'U', '93' : 'Np', '94' : 'Pu', '95' : 'Am', '96' : 'Cm', '97' : 'Bk', '98' : 'Cf', '99' : 'Es', '100' : 'Fm',
'101' : 'Md', '102' : 'No', '103' : 'Lr', '104' : 'Rf', '105' : 'Db', '106' : 'Sg', '107' : 'Bh', '108' : 'Hs', '109' : 'Mt', '110' : 'Ds',
'111' : 'Rg', '112' : 'Cn', '113' : 'Nh', '114' : 'Fl', '115' : 'Mc', '116' : 'Lv', '117' : 'Ts', '118' : 'Og'}
num['key'] = value
5)내가 기여한 내용에 대한 설명
주기율표 상에서 원소는 약 110여가지로 원소번호에 따른 원소기호를 알고 있는 것이 어렵다.
그러므로 원자번호를 입력하면 전자배치와 함께 원자번호를 나타내어 이러한 원소가 어떤 전자배치를 가지고 있는지를 쉽게 알 수 있다.  
6)내가 기여한 내용의 반영 여부 : X

[프로젝트 3 : 별의 뜨고 지는 시각, 관측 시간 구하기]
1)연구소 이름 : 꽃 같은 연구소
2)연구소가 해결하려는 문제 : 별의 뜨고 지는 시각과 별을 관측할 수 있는 시간 구하기
3)연구소의 깃헙 링크 : https://github.com/mapotofu21518/2-1-real/blob/master/%EC%A0%95%EB%B3%B4.ipynb
4-1)수정하거나 추가하고 싶은 내용
(수정하거나 추가하고 싶은 내용을 작성해주세요)
4-2)내가 기여한 내용
def day_ratio(d,c):  # d:적위, c:위도
    if 90-c <= d <=90:  # 90-위도 <= 적위 < 90 인 경우
        return 1  # 주극성
    if -90 <= d <= -(90-c):  # -90 <= 적위 < -90+위도
        return 0  # 전몰성
    r = math.acos(-math.tan(math.radians(d))*math.tan(math.radians(c)))
    r_real = math.degrees(r)* 2
    r_daytime = r_real/360  # daytime = (arccos(tan적위*tan위도)/pi)*24h
    return r_daytime

def timecon(time): # 소수로 주어지는 시각을 시, 분, 초로 쪼개주는 함수
    listtime=[]  # 리스트 생성
    hour = int(time)  # 시:입력한 시각의 정수부분
    minute = int((time - hour)*60)  # 분
    sec = int(((time - hour)*60 - minute)*60) # 초 
    listtime.append(hour)  
    listtime.append(minute)
    listtime.append(sec)  # 리스트에 시, 분, 초 append
    return listtime

def decsun(mm,dd):  # mm:월, dd: 일 
    listmonth=[31,28,31,30,31,30,31,31,30,31,30,31]  # 1월부터 12월까지 한 달의 일 수
    cnt_date = 0  # 초기값 0
    for i in range(mm-1):  # mn-1이하 범위의 i에 대해
        cnt_date += listmonth[i]  # 리스트[i]값을 cnt_date에 추가
    cnt_date += dd  # cnt_date에 '일' 추가  
    
dec = 23.45 * math.sin(math.radians(((285 + cnt_date)/365)*360))  # 태양의 적위 구하는 함수
    return dec
    
    ...
    
 def risetime(ratio):  # 뜨는 시각
    if ratio == 1:
        return '주극성'
    elif ratio == 0:
        return '전몰성'
    else: 
        daytime = ratio*24  # 주극성일 경우 daytime = 1*24시간, 전몰성일 겨우 daytime = 0*24시간 
        time_starrise = starhigh(asc_star) - daytime/2  # 뜨는 시각 = 남중시각 - 떠있는시간의 절반
        return time_starrise
        
def settime(ratio):
    if ratio == 1:
        return '주극성'
    elif ratio == 0:
        return '전몰성'
    else: 
        daytime = ratio*24
        time_starset = starhigh(asc_star) + daytime/2  # 지는 시각 = 남중시각 + 떠있는시간의 절반
        return time_starset
        
5)내가 기여한 내용에 대한 설명
주석을 달았다.
6)내가 기여한 내용의 반영 여부 : x
